name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "viby"
  OWNER: "JohanLi233"
  TAP_NAME: "homebrew-viby"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update version in pyproject.toml
        run: |
          sed -i "s/^version = .*/version = \"${{ needs.details.outputs.tag_name }}\"/" pyproject.toml
          cat pyproject.toml

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install build
          uv pip install -e .

      - name: Build source and wheel distribution
        run: |
          source .venv/bin/activate
          python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  release_approval:
    name: Release Approval
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release-approval
      url: https://github.com/${{ env.OWNER }}/${{ env.PACKAGE_NAME }}/releases
    steps:
      - name: Display release information for review
        run: |
          echo "=== 发布信息 ==="
          echo "包名：${{ env.PACKAGE_NAME }}"
          echo "版本：${{ needs.details.outputs.tag_name }}"
          echo "准备发布到：PyPI, GitHub Releases 和 Homebrew"
          echo "请在 GitHub 中批准此步骤以继续所有发布流程。"

  pypi_publish:
    name: Upload release to PyPI
    needs: [release_approval, setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Upload package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.11

  github_release:
    name: Create GitHub Release
    needs: [release_approval, setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: ${{ needs.details.outputs.tag_name }}
          name: Release ${{ needs.details.outputs.tag_name }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ needs.details.outputs.suffix != '' }}

  bump_homebrew_formula:
    name: Update Homebrew Formula
    needs: [details, github_release, pypi_publish]
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch Repository Dispatch event
        uses: peter-evans/repository-dispatch@v2
        with:
          events_from_secrets: true
          repository: ${{ env.OWNER }}/${{ env.TAP_NAME }}
          event-type: update_formula
          token: ${{ secrets.GITHUB_TOKEN }}
          client-payload: |-
            { 
              "formula_version": "${{ needs.details.outputs.tag_name }}", 
              "formula_url": "https://github.com/${{ env.OWNER }}/${{ env.PACKAGE_NAME }}/releases/download/${{ needs.details.outputs.tag_name }}/${{ env.PACKAGE_NAME }}-${{ needs.details.outputs.tag_name }}.tar.gz", 
              "formula_name": "${{ env.PACKAGE_NAME }}"
            }